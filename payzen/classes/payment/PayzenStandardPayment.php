<?php
/**
 * Copyright © Lyra Network.
 * This file is part of PayZen plugin for PrestaShop. See COPYING.md for license details.
 *
 * @author    Lyra Network (https://www.lyra-network.com/)
 * @copyright Lyra Network
 * @license   https://opensource.org/licenses/afl-3.0.php Academic Free License (AFL 3.0)
 */

if (!defined('_PS_VERSION_')) {
    exit;
}

class PayzenStandardPayment extends AbstractPayzenPayment
{
    protected $prefix = 'PAYZEN_STD_';
    protected $tpl_name = 'payment_std.tpl';
    protected $logo = 'standard.png';
    protected $name = 'standard';

    public function isAvailable($cart)
    {
        if (!parent::isAvailable($cart)) {
            return false;
        }

        if ($this->proposeOney()) {
            return PayzenTools::checkOneyRequirements($cart);
        }

        return true;
    }

    protected function proposeOney($data = array())
    {
        if (isset($data['card_type']) && !in_array($data['card_type'], array('ONEY_SANDBOX', 'ONEY'))) {
            return false;
        }

        if (Configuration::get($this->prefix.'PROPOSE_ONEY') != 'True' || $this->getEntryMode() == '3') {
            return false;
        }

        return true;
    }

    public function validate($cart, $data = array())
    {
        $errors = parent::validate($cart, $data);

        if (empty($errors) && $this->proposeOney($data)) {
            $billing_address = new Address((int)$cart->id_address_invoice);

            // check address validity according to FacilyPay Oney payment specifications
            $errors = PayzenTools::checkAddress($billing_address, 'billing', $this->name);

            if (empty($errors)) {
                // billing address is valid, check delivery address
                $delivery_address = new Address((int)$cart->id_address_delivery);

                $errors = PayzenTools::checkAddress($delivery_address, 'delivery', $this->name);
            }
        }

        return $errors;
    }

    public function getTplVars($cart)
    {
        $vars = parent::getTplVars($cart);

        $entry_mode = $this->getEntryMode();
        $vars['payzen_std_card_data_mode'] = $entry_mode;

        if ($entry_mode == '2' /* card type on website */ || $entry_mode == '3' /* data entry on website */) {
            $vars['payzen_avail_cards'] = $this->getPaymentCards();
        } elseif ($this->getEntryMode() == '4' /* iframe mode */) {
            $this->tpl_name = 'payment_std_iframe.tpl';
        } elseif ($entry_mode == '5' /* REST API */) {
            $form_token = $this->getFormToken($cart);

            if ($form_token) {
                // REST API params
                $vars['payzen_ajax'] = (bool)Tools::getValue('ajax');
                $vars['payzen_rest_form_token'] = $form_token;

                $this->tpl_name = 'payment_std_rest.tpl';
            } else {
                // form token not generated by platform, force payment using default mode
                $vars['payzen_std_card_data_mode'] = '1';
            }
        }

        return $vars;
    }

    private function getPaymentCards()
    {
        // get selected card types
        $cards = Configuration::get($this->prefix.'PAYMENT_CARDS');
        if (!empty($cards)) {
            $cards = explode(';', $cards);
        } else {
            // no card type selected, display all supported cards
            $cards = array_keys(PayzenTools::getSupportedCardTypes());
        }

        if ($this->proposeOney()) {
            $cards[] = (Configuration::get('PAYZEN_MODE') == 'TEST') ? 'ONEY_SANDBOX' : 'ONEY';
        }

        // retrieve card labels
        $avail_cards = array();
        foreach (PayzenApi::getSupportedCardTypes() as $code => $label) {
            if (in_array($code, $cards)) {
                $avail_cards[$code] = $label;
            }
        }

        return $avail_cards;
    }

    public function getEntryMode()
    {
        // get data entry mode
        $entry_mode = Configuration::get($this->prefix.'CARD_DATA_MODE');
        if ($entry_mode == '3' && !$this->checkSsl()) {
            $entry_mode = '1'; // no data entry on merchant site without SSL
        }

        return $entry_mode;
    }

    private function checkSsl()
    {
        return Configuration::get('PS_SSL_ENABLED') && Tools::usingSecureMode();
    }

    /**
     * {@inheritDoc}
     * @see AbstractPayzenPayment::prepareRequest()
     */
    public function prepareRequest($cart, $data = array())
    {
        $request = parent::prepareRequest($cart, $data);

        if (isset($data['iframe_mode']) && $data['iframe_mode']) {
            $request->set('action_mode', 'IFRAME');

            // hide logos below payment fields
            $request->set('theme_config', Configuration::get('theme_config') . '3DS_LOGOS=false;');

            // enable automatic redirection
            $request->set('redirect_enabled', '1');
            $request->set('redirect_success_timeout', '0');
            $request->set('redirect_error_timeout', '0');

            $return_url = $request->get('url_return');
            $sep = strpos($return_url, '?') === false ? '?' : '&';
            $request->set('url_return', $return_url.$sep.'content_only=1');
        }

        if (isset($data['card_type']) && $data['card_type']) {
            // override payemnt_cards parameter
            $request->set('payment_cards', $data['card_type']);

            if ($data['card_type'] === 'BANCONTACT') {
                // may not disable 3DS for Bancontact Mistercash
                $request->set('threeds_mpi', null);
            }

            if (isset($data['card_number']) && $data['card_number']) {
                $request->set('card_number', $data['card_number']);
                $request->set('cvv', $data['cvv']);
                $request->set('expiry_year', $data['expiry_year']);
                $request->set('expiry_month', $data['expiry_month']);

                // override action_mode to do a silent payment
                $request->set('action_mode', 'SILENT');
            }
        } else {
            $cards = Configuration::get($this->prefix.'PAYMENT_CARDS');
            if (!empty($cards) && $this->proposeOney()) {
                $cards .= ';'.(Configuration::get('PAYZEN_MODE') == 'TEST' ? 'ONEY_SANDBOX' : 'ONEY');
            }

            $request->set('payment_cards', $cards);
        }

        return $request;
    }

    private function getFormToken($cart)
    {
        $request = $this->prepareRequest($cart, array());

        $strong_auth = $this->getEscapedVar($request, 'threeds_mpi') == '2' ? 'DISABLED' : 'AUTO';
        $currency = PayzenApi::findCurrencyByNumCode($this->getEscapedVar($request, 'currency'));
        $cart_id = $this->getEscapedVar($request, 'order_id');

        $params = array(
            'orderId' => $cart_id,
            'customer' => array(
                'email' => $this->getEscapedVar($request, 'cust_email'),
                'reference' => $this->getEscapedVar($request, 'cust_id'),
                'billingDetails' => array(
                    'language' => $this->getEscapedVar($request, 'language'),
                    'title' => $this->getEscapedVar($request, 'cust_title'),
                    'firstName' => $this->getEscapedVar($request, 'cust_first_name'),
                    'lastName' => $this->getEscapedVar($request, 'cust_last_name'),
                    'category' => $this->getEscapedVar($request, 'cust_status'),
                    'address' => $this->getEscapedVar($request, 'cust_address'),
                    'zipCode' => $this->getEscapedVar($request, 'cust_zip'),
                    'city' => $this->getEscapedVar($request, 'cust_city'),
                    'state' => $this->getEscapedVar($request, 'cust_state'),
                    'phoneNumber' => $this->getEscapedVar($request, 'cust_phone'),
                    'country' => $this->getEscapedVar($request, 'cust_country')
                ),
                'shippingDetails' => array(
                    'firstName' => $this->getEscapedVar($request, 'ship_to_first_name'),
                    'lastName' => $this->getEscapedVar($request, 'ship_to_last_name'),
                    'category' => $this->getEscapedVar($request, 'ship_to_status'),
                    'address' => $this->getEscapedVar($request, 'ship_to_street'),
                    'address2' => $this->getEscapedVar($request, 'ship_to_street2'),
                    'zipCode' => $this->getEscapedVar($request, 'ship_to_zip'),
                    'city' => $this->getEscapedVar($request, 'ship_to_city'),
                    'state' => $this->getEscapedVar($request, 'ship_to_state'),
                    'phoneNumber' => $this->getEscapedVar($request, 'ship_to_phone_num'),
                    'country' => $this->getEscapedVar($request, 'ship_to_country'),
                    'deliveryCompanyName' => $this->getEscapedVar($request, 'ship_to_delivery_company_name'),
                    'shippingMethod' => $this->getEscapedVar($request, 'ship_to_type'),
                    'shippingSpeed' => $this->getEscapedVar($request, 'ship_to_speed')
                )
            ),
            'transactionOptions' => array(
                'cardOptions' => array(
                    'captureDelay' => $this->getEscapedVar($request, 'capture_delay'),
                    'manualValidation' => ($this->getEscapedVar($request, 'validation_mode') == '1') ? 'YES' : 'NO',
                    'paymentSource' => 'EC'
                )
            ),
            'contrib' => $this->getEscapedVar($request, 'contrib'),
            'strongAuthenticationState' => $strong_auth,
            'currency' => $currency->getAlpha3(),
            'amount' => $this->getEscapedVar($request, 'amount'),
            'metadata' => array(
                'orderInfo' => $this->getTitle((int)$cart->id_lang)
            )
        );

        // Set Number of attempts in case of rejected payment
        if (Configuration::get($this->prefix.'REST_ATTEMPTS')) {
            $params['transactionOptions']['cardOptions']['retry'] = Configuration::get($this->prefix.'REST_ATTEMPTS');
        }

        $test_mode = Configuration::get('PAYZEN_MODE') == 'TEST';
        $key = $test_mode ? Configuration::get($this->prefix.'PRIVKEY_TEST') : Configuration::get($this->prefix.'PRIVKEY_PROD');
        $site_id = Configuration::get('PAYZEN_SITE_ID');

        require_once _PS_MODULE_DIR_.'payzen/classes/PayzenRest.php';

        $return = false;
        try {
            $client = new PayzenRest(PayzenTools::getDefault('REST_URL'), $site_id, $key);
            $result = $client->post('V4/Charge/CreatePayment', json_encode($params));

            if ($result['status'] != 'SUCCESS') {
                PayzenTools::getLogger()->logError("Error while creating payment form token for cart #$cart_id: ".$result['answer']['errorMessage']
                    .' ('.$result['answer']['errorCode'].').');

                if (isset($result['answer']['detailedErrorMessage']) && !empty($result['answer']['detailedErrorMessage'])) {
                    PayzenTools::getLogger()->logError('Detailed message: '.$result['answer']['detailedErrorMessage']
                        .' ('.$result['answer']['detailedErrorCode'].').');
                }
            } else {
                // payment form token created successfully
                PayzenTools::getLogger()->logInfo("Form token created successfully for cart #$cart_id.");
                $return = $result['answer']['formToken'];
            }
        } catch (Exception $e) {
            PayzenTools::getLogger()->logError($e->getMessage());
        }

        return $return;
    }

    private function getEscapedVar($request, $var)
    {
        $value = $request->get($var);

        if (empty($value)) {
            return null;
        }

        return $value;
    }

    public function hasForm()
    {
        if ($this->getEntryMode() == '1') {
            return false;
        }

        return true;
    }

    protected function getDefaultTitle()
    {
        return $this->l('Payment by credit card');
    }
}
